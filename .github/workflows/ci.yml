name: CI Maven Spring with SonarCloud and PostgreSQL

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  # Job 1: Compilación
  build:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_DB: testdb
          POSTGRES_USER: testuser
          POSTGRES_PASSWORD: testpassword
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
      # Paso 1: Chequear el código desde el repositorio
      - name: Check out the code
        uses: actions/checkout@v3

      # Paso 2: Instalar JDK (puedes cambiar la versión según tus necesidades)
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'adopt'
          cache: maven

      # Paso 3: Esperar a que la base de datos esté lista
      - name: Wait for PostgreSQL to be ready
        run: |
          until pg_isready -h localhost -p 5432; do
            echo "Waiting for PostgreSQL to be ready..."
            sleep 3
          done

      # Paso 4: Configurar la base de datos PostgreSQL en el proyecto Spring
      - name: Set up PostgreSQL environment variables
        run: |
          echo "SPRING_DATASOURCE_URL=jdbc:postgresql://localhost:5432/testdb" >> $GITHUB_ENV
          echo "SPRING_DATASOURCE_USERNAME=testuser" >> $GITHUB_ENV
          echo "SPRING_DATASOURCE_PASSWORD=testpassword" >> $GITHUB_ENV

      # Paso 5: Compilar el proyecto
      - name: Build with Maven
        run: mvn clean compile

      # Paso 6: Guardar los artefactos de compilación
      - name: Save build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: compiled-application
          path: target/

  # Job 2: Ejecución de Tests
  test:
    runs-on: ubuntu-latest
    needs: build  # Este trabajo depende del job de build

    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_DB: testdb
          POSTGRES_USER: testuser
          POSTGRES_PASSWORD: testpassword
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
      # Paso 1: Chequear el código desde el repositorio
      - name: Check out the code
        uses: actions/checkout@v3

      # Paso 2: Instalar JDK
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'adopt'
          cache: maven

      # Paso 3: Descargar los artefactos de compilación
      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: compiled-application

      # Paso 4: Esperar a que la base de datos esté lista
      - name: Wait for PostgreSQL to be ready
        run: |
          until pg_isready -h localhost -p 5432; do
            echo "Waiting for PostgreSQL to be ready..."
            sleep 3
          done

      # Paso 5: Configurar la base de datos PostgreSQL en el proyecto Spring
      - name: Set up PostgreSQL environment variables
        run: |
          echo "SPRING_DATASOURCE_URL=jdbc:postgresql://localhost:5432/testdb" >> $GITHUB_ENV
          echo "SPRING_DATASOURCE_USERNAME=testuser" >> $GITHUB_ENV
          echo "SPRING_DATASOURCE_PASSWORD=testpassword" >> $GITHUB_ENV

      # Paso 6: Ejecutar Tests con Maven
      - name: Run Tests with Maven
        run: mvn test

  # Job 3: Análisis con SonarCloud
  sonarcloud:
    runs-on: ubuntu-latest
    needs: build  # Este trabajo depende del job de build

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: '17'

      - name: Set up Maven
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'adoptopenjdk'
          cache: 'maven'

      - name: Build and Analyze with Maven
        run: mvn clean verify sonar:sonar -Dsonar.projectKey=xosebabio_CarRegistry -Dsonar.organization=xosebabio -Dsonar.host.url=https://sonarcloud.io -Dsonar.login=${{ secrets.SONAR_TOKEN }}


      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: sonar-report
          path: target/sonar